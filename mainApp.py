import pandas
import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
import sklearn.model_selection
import numpy
import sklearn.impute
from sklearn.tree import DecisionTreeClassifier
import sklearn.preprocessing
from sklearn.preprocessing import OrdinalEncoder  

#input data
data= pandas.read_csv('suicideDATA_income.csv').set_index('ลำดับ')


# List of categorical features based on dataset
categorical_features = [
    'เพศ', 'สถานภาพสมรส', 'เชื้อชาติ', 'สัญชาติ', 'ศาสนา', 'การศึกษา',
    'อาชีพ','รายได้ต่อเดือนv.2','ฤดูกาล', 'Pro.ตำบล / แขวง', 'Pro.อำเภอ / เขต', 'Pro.จังหวัด',
    'ประสบปัญหาชีวิต', 'สูญเสียความสัมพันธ์', 'เป็นหนี้', 'เกิดความขัดแย้งรุนแรงกับคนสำคัญในชีวิต',
    'ประสบความล้มเหลวในการงาน', 'ถูกตำหนิให้อับอาย', 'ปัญหาสุขภาพ', 'มีคดีความ', 
    'Social isolation', 'ล้มเหลวในการเรียน', 'Violence relationship',
    'ปัจจัยกระตุ้นอาการทางจิตเวชกำเริบ', 'โรคซึมเศร้า', 'โรคไบโพล่าร์', 'โรคจิตเภท',
    'โรคบุคลิกภาพผิดปกติ', 'โรควิตกังวล', 'ปัจจัยกระตุ้นเกิดพิษหรือฤทธิ์สารเสพติดที่เสพ',
    'ปัจจัยกระตุ้นจากรับรู้ข่าวการฆ่าตัวตาย', 'R1.ป่วยด้วยโรคจิตเวช',
    'R1.โรคซึมเศร้า', 'R1.โรคไบโพล่าร์', 'R1.โรคจิตเภท', 'R1.โรคบุคลิกภาพผิดปกติ', 'R1.โรควิตกังวล',
    'R2.ป่วยด้วยโรคติดสุรา', 'R3.ติดสารเสพติด', 'R4.ปัจจัยเสี่ยงโรคทางกาย', 'โรคปวดเรื้อรัง',
    'อัมพาต/โรคหลอดเลือดสมอง', 'โรคมะเร็ง', 'โรคตับเรื้อรัง', 'ไตวายเรื้อรัง', 'พิการ',
    'ปวดศีรษะเรื้อรัง', 'โรคหัวใจ', 'โรคเอดส์/HIV','R5.บุคลิกภาพ', 
    'R5A.บุคลิกภาพหุนหันพลันแล่น (Impulsive)', 'R5B.นิยมความสมบูรณ์แบบ (Perfectionism)', 
    'R6.ตนเองเคยฆ่าตัวตาย', 'R7.คนในครอบครัวเคยฆ่าตัวตาย', 'R8.Childhood trauma', 
    'R9.ค่านิยมความเชื่อส่วนบุคคล', 'Prof1.ส่วนตัว', 'Prof2.ครอบครัว', 
    'Prof3.เพื่อน', 'Prof4.ชุมชน', 'Prof5.กาเข้าถึงบริการสุขภาพ', 'Prof6.ทักษะการแก้ไขปัญหา',
    'ด่านกั้นควบคุมสารพิษ วัสดุอุปกรณ์ในครอบครัวหรือในพื้นที่', 'ด่านกั้นการปิดกั้นหรือเฝ้าระวังป้องกันสถานที่',
    'สัญญาณเตือนการฆ่าตัวตาย', 'การรักษาอาการบาดเจ็บทางกาย', 
    'การตรวจประเมินตามมาตรฐานจิตเวชและการช่วยเหลือทางสังคมจิตใจ',
    'การแก้ไขปัญหาหรือวิกฤติชีวิตที่เป็นปัจจัยกระตุ้น', 'การลดหรือขจัดปัจจัยเสี่ยง', 
    'การสร้างและเสริมปัจจัยปกป้อง ระดับบุคคลและระดับครอบครัว',
    'การติดตามช่วยเหลือต่อเนื่องป้องกันการกระทำรุนแรงต่อตนเองซ้ำ'
]

data_categorical_features = data[categorical_features]

categorical_imputer = sklearn.impute.SimpleImputer(strategy='most_frequent')

categorical_imputer.fit(data_categorical_features)

data_categorical_features = pandas.DataFrame(
data = categorical_imputer.transform(data_categorical_features),
columns = categorical_imputer.get_feature_names_out(),
index = data_categorical_features.index,)

numerical_features = [
    "อายุ"   
 ]

data_numerical_features = data[numerical_features]
 
numerical_imputer = sklearn.impute.SimpleImputer(strategy='mean')

numerical_imputer.fit(data_numerical_features)

data_numerical_features = pandas.DataFrame(
data = numerical_imputer.transform(data_numerical_features),
columns = numerical_imputer.get_feature_names_out(),
index = data_numerical_features.index)

data = (
data_categorical_features
.join(data_numerical_features)
 
)

ordinal_features = ['เพศ',
    'ประสบปัญหาชีวิต', 'สูญเสียความสัมพันธ์', 'เป็นหนี้', 'เกิดความขัดแย้งรุนแรงกับคนสำคัญในชีวิต',
    'ประสบความล้มเหลวในการงาน', 'ถูกตำหนิให้อับอาย', 'ปัญหาสุขภาพ', 'มีคดีความ', 
    'Social isolation', 'ล้มเหลวในการเรียน', 'Violence relationship', 
    'ปัจจัยกระตุ้นอาการทางจิตเวชกำเริบ', 'โรคซึมเศร้า', 'โรคไบโพล่าร์', 'โรคจิตเภท', 
    'โรคบุคลิกภาพผิดปกติ', 'โรควิตกังวล',  'ปัจจัยกระตุ้นเกิดพิษหรือฤทธิ์สารเสพติดที่เสพ', 
    'ปัจจัยกระตุ้นจากรับรู้ข่าวการฆ่าตัวตาย', 'R1.ป่วยด้วยโรคจิตเวช', 
    'R1.โรคซึมเศร้า', 'R1.โรคไบโพล่าร์', 'R1.โรคจิตเภท', 'R1.โรคบุคลิกภาพผิดปกติ', 
    'R1.โรควิตกังวล', 'R2.ป่วยด้วยโรคติดสุรา', 'R3.ติดสารเสพติด', 'R4.ปัจจัยเสี่ยงโรคทางกาย', 
    'โรคปวดเรื้อรัง', 'อัมพาต/โรคหลอดเลือดสมอง', 'โรคมะเร็ง', 'โรคตับเรื้อรัง', 
    'ไตวายเรื้อรัง', 'พิการ', 'ปวดศีรษะเรื้อรัง', 'โรคหัวใจ', 'โรคเอดส์/HIV', 
     'R5.บุคลิกภาพ', 'R5A.บุคลิกภาพหุนหันพลันแล่น (Impulsive)', 
    'R5B.นิยมความสมบูรณ์แบบ (Perfectionism)', 'R6.ตนเองเคยฆ่าตัวตาย', 
    'R7.คนในครอบครัวเคยฆ่าตัวตาย', 'R8.Childhood trauma', 'R9.ค่านิยมความเชื่อส่วนบุคคล', 
     'Prof1.ส่วนตัว', 'Prof2.ครอบครัว', 'Prof3.เพื่อน', 'Prof4.ชุมชน', 
    'Prof5.กาเข้าถึงบริการสุขภาพ', 'Prof6.ทักษะการแก้ไขปัญหา', 
    'ด่านกั้นควบคุมสารพิษ วัสดุอุปกรณ์ในครอบครัวหรือในพื้นที่', 
    'ด่านกั้นการปิดกั้นหรือเฝ้าระวังป้องกันสถานที่', 'สัญญาณเตือนการฆ่าตัวตาย', 
    'การรักษาอาการบาดเจ็บทางกาย', 'การตรวจประเมินตามมาตรฐานจิตเวชและการช่วยเหลือทางสังคมจิตใจ', 
    'การแก้ไขปัญหาหรือวิกฤติชีวิตที่เป็นปัจจัยกระตุ้น', 'การลดหรือขจัดปัจจัยเสี่ยง', 
    'การสร้างและเสริมปัจจัยปกป้อง ระดับบุคคลและระดับครอบครัว', 
    'การติดตามช่วยเหลือต่อเนื่องป้องกันการกระทำรุนแรงต่อตนเองซ้ำ',
]

ordinal_mapping = [
    ['ชาย', 'หญิง'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'น้อย', 'มาก'],
    ['ไม่มี', 'น้อย', 'มาก'],
    ['น้อย', 'ไม่มี', 'มาก'],
    ['น้อย', 'ไม่มี', 'มาก'],
    ['น้อย', 'ไม่มี', 'มาก'],
    ['ไม่มี', 'น้อย', 'มาก'],
    ['ไม่มี', 'มี แต่ไม่เข้มแข็ง', 'มีและเข้มแข็ง'],
    ['ไม่มี', 'มี แต่ไม่เข้มแข็ง', 'มีและเข้มแข็ง'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    ['ไม่มี', 'มี'],
    
]


ordinal_encoder = sklearn.preprocessing.OrdinalEncoder(categories=ordinal_mapping)


ordinal_encoder.fit(X = data[ordinal_features])
 
data_ordinal_features = pandas.DataFrame(data= ordinal_encoder.transform(data[ordinal_features]),
columns = ordinal_encoder.get_feature_names_out(),
index = data.index)

nominal_features = [
     
'สถานภาพสมรส',
 'เชื้อชาติ',
 'สัญชาติ',
 'ศาสนา',
 'การศึกษา',
 'อาชีพ',
     'รายได้ต่อเดือนv.2',
     'ฤดูกาล',
 'Pro.ตำบล / แขวง',
 'Pro.อำเภอ / เขต',
 'Pro.จังหวัด'
     
 ]
 
nominal_mapping = [
 ['โสด','คู่', 'หย่า', 'หม้าย', 'ไม่ทราบ', 'ไม่กรอกข้อมูล/ว่าง','แยก'],
 ['ไทย', 'ไม่ระบุ' ,'พม่าพลัดถิ่น', 'ชาวเขาที่ไม่ได้สัญชาติไทย', 'ไร้สัญชาติ'],['ไทย', 'ไม่ระบุ' ,'อื่น ๆ' ,'พม่าพลัดถิ่น' ,'ชาวเขาที่ไม่ได้สัญชาติไทย','พม่า', 'ลาว'],
 ['พุทธ', 'ไม่ระบุ', 'คริสต์'],
 ['ประถมศึกษา', 'ไม่ระบุ หรือ ไม่ทราบ', 'มัธยมศึกษาตอนปลาย หรือ ปวช.','มัธยมศึกษาตอนต้น' ,'ไม่ได้รับการศึกษา', 'ปริญญาโท', 'อนุปริญญา หรือ ปวส.','ปริญญาตรี'],
 ['(ไม่ระบุ)', 'รับจ้าง', 'นักเรียน นักศึกษา', 'เกษตรกรรม', 'แม่บ้าน (ไม่ได้ทำงาน)', 'ค้าขาย', 'รับราชการ (ข้าราชการพลเรือน)', 'คนขับรถรับจ้าง', 'ทำนา', 'อาจารย์โรงเรียน', 'ผู้ใหญ่บ้าน', 'พนักงานรัฐวิสาหกิจ', 'พนักงานหน่วยงานเอกชน', 'ผู้ปฏิบัติงานหน่วยงานของรัฐอื่น ๆ', 'สถาปนิก', 'ในปกครอง', 'ช่างซ่อมเครื่องยนต์', 'ข้าราชการบำเหน็จ', 'พยาบาล', 'กรรมกร', 'ตำรวจ', 'ผู้ปฏิบัติงานด้านช่างอื่นๆ', 'ทำไร่', 'ลูกจ้างชั่วคราว', 'พนักงานขาย','ช่างเสริมสวย', 'พนักงานเสิร์ฟ', 'ผู้ช่วยผู้ใหญ่บ้าน'],
 ['ไม่มีรายได้' ,'สูงมาก', 'ปานกลาง', 'ปานกลางค่อนสูง', 'น้อย', 'น้อยมาก', 'สูง'],
 ['ฤดูหนาว' ,'ฤดูฝน', 'ฤดูร้อน'],
 ['ต.ป่าซาง', 'ต.แม่เปา', 'ต.ดอยฮาง', 'ต.เม็งราย', 'ต.ศรีค้ำ', 'ต.สันมะเค็ด', 'ต.วาวี', 'ต.โป่งแพร่', 'ต.โป่งงาม', 'ต.ป่าก่อดำ', 'ต.ต้า', 'ต.ม่วงคำ', 'ต.เมืองชุม', 'ต.ทรายขาว', 'ต.ป่าตาล', 'ต.ปอ', 'ต.จอมหมอกแก้ว', 'ต.ยางฮอม', 'ต.เวียงชัย', 'ต.ป่าตึง', 'ต.เวียง', 'ต.เมืองนะ', 'ต.ท่าก๊อ', 'ต.แม่อ้อ', 'ต.แม่สลองนอก', 'ต.ป่าแดด', 'ต.หัวง้ม', 'ต.ป่าแงะ', 'ต.แม่สลองใน', 'ต.เมืองพาน', 'ต.เทอดไทย', 'ต.แม่ข้าวต้ม', 'ต.ดอนศิลา', 'ต.แม่จัน', 'ต.ห้วยสัก', 'ต.ศรีถ้อย', 'ต.แม่คำ', 'ต.เจริญเมือง', 'ต.จันจว้า', 'ต.แม่เย็น', 'ต.รอบเวียง', 'ต.ป่าหุ่ง', 'ต.เจดีย์หลวง', 'ต.ไม้ยา', 'ต.หนองแรด', 'ต.แม่ฟ้าหลวง', 'ต.ริมกก', 'ต.แม่ไร่', 'ต.โรงช้าง', 'ต.วังทอง', 'ต.ศรีดอนมูล', 'ต.ธารทอง', 'ต.แม่พริก', 'ต.ทานตะวัน', 'ต.หล่ายงาว', 'ต.ป่าสัก', 'ต.งิ้ว', 'ต.แม่กรณ์', 'ต.ท่าข้าวเปลือก', 'ต.ดอยงาม', 'ต.ศรีดอนชัย', 'ต.สันกลาง', 'ต.ตับเต่า', 'ต.ดงมะดะ', 'ต.สันทรายงาม', 'ต.นาตาล่วง', 'ต.โยนก', 'ต.ห้วยไคร้', 'ต.บ้านแซว', 'ต.ริมโขง', 'ต.แม่สาย', 'ต.ทับยา', 'ต.ป่าอ้อดอนชัย', 'ต.สถาน', 'ต.เวียงเหนือ', 'ต.แม่ต๋ำ', 'ต.ตาดควัน', 'ต.ศรีโพธิ์เงิน', 'ต.ห้วยซ้อ', 'ต.ดอยลาน', 'ต.หงาว', 'ต.บัวสลี', 'ต.จันจว้าใต้', 'ต.ม่วงยาย', 'ต.ท่าสุด', 'ต.ขุนทอง', 'ต.สันทราย', 'ต.เวียงพางคำ', 'ต.ท่าสาย', 'ต.ท่าข้าม', 'ต.วังน้ำเย็น', 'ต.ผางาม', 'ต.บุญเรือง', 'ต.ปล้อง', 'ต.ทากาศ', 'ต.แม่ลอย', 'ต.วังเหนือ', 'ต.ห้วยชมภู', 'ต.สันติสุข', 'ต.แม่สรวย', 'ต.ทุ่งผึ้ง', 'ต.แม่เงิน', 'ต.จอมสวรรค์', 'ต.แม่เมาะ', 'ต.ครึ่ง', 'ต.บ้านด้าย', 'ต.โชคชัย','ต.ห้วยกระเจา', 'ต.สนวน', 'ต.งิม', 'ต.นาเกลือ', 'ต.เกาะช้าง', 'ต.บางรัก'],
 ['อ.แม่จัน', 'อ.พญาเม็งราย', 'อ.เมืองเชียงราย', 'อ.พาน', 'อ.แม่สรวย', 'อ.แม่ลาว', 'อ.แม่สาย', 'อ.ขุนตาล', 'อ.เวียงชัย', 'อ.เวียงแก่น', 'อ.เชียงดาว', 'อ.แม่ฟ้าหลวง', 'อ.เชียงของ', 'อ.ป่าแดด', 'อ.เทิง', 'อ.เชียงแสน', 'อ.วังเหนือ', 'อ.เมืองตรัง', 'อ.อินทร์บุรี', 'อ.เวียงป่าเป้า', 'อ.บัวใหญ่', 'อ.วังน้ำเย็น', 'อ.แม่ทา', 'อ.แจ้ห่ม', 'อ.แม่เมาะ', 'อ.กิ่งอำเภอดอยหลวง','อ.บางละมุง', 'อ.เขตบางรัก', 'อ.ปง', 'อ.ห้วยกระเจา', 'อ.ห้วยราช'],
 ['จ.เชียงราย', 'จ.เชียงใหม่', 'จ.ลำปาง', 'จ.ตรัง', 'จ.สิงห์บุรี', 'จ.นครราชสีมา', 'จ.สระแก้ว', 'จ.ลำพูน','จ.ชลบุรี', 'จ.บุรีรัมย์', 'จ.พะเยา', 'จ.กรุงเทพมหานคร', 'จ.กาญจนบุรี']
]
 
onehot_encoder = sklearn.preprocessing.OneHotEncoder(categories=nominal_mapping, sparse_output=False)
onehot_encoder.fit(
 X=data[nominal_features]
 )
data_nominal_features = pandas.DataFrame(
data
= onehot_encoder.transform(data[nominal_features]),
columns = onehot_encoder.get_feature_names_out(),
index = data.index
)
 
data_use = (
 data_numerical_features
 .join(data_ordinal_features)
 .join(data_nominal_features)
 
 )
model = pickle.load(open('dtm_trained.pkl', 'rb'))
 
data_predictions = pandas.DataFrame(
 data = model.predict(data_use),
 index = data_use.index,
 columns = ['prediction']
 )

# Sidebar
st.sidebar.title("Prediction Visualizer")
show_bar = st.sidebar.checkbox("Show Bar Chart", value=True)
show_pie = st.sidebar.checkbox("Show Pie Chart", value=True)

# Title
st.title("Prediction Result Overview")

# Show raw data
if st.checkbox("Show raw predictions"):
    st.dataframe(data_predictions)

# Count values
prediction_counts = data_predictions['prediction'].value_counts().sort_index()

# Bar Chart
if show_bar:
    st.subheader("Bar Chart of Predictions")
    fig_bar, ax_bar = plt.subplots()
    sns.barplot(
        x=prediction_counts.index.astype(str),
        y=prediction_counts.values,
        palette="Set2",
        ax=ax_bar
    )
    ax_bar.set_xlabel("Prediction Class")
    ax_bar.set_ylabel("Count")
    ax_bar.set_title("Distribution of Predicted Classes")
    st.pyplot(fig_bar)

# Pie Chart
if show_pie:
    st.subheader("Pie Chart of Predictions")
    fig_pie, ax_pie = plt.subplots()
    ax_pie.pie(
        prediction_counts.values,
        labels=prediction_counts.index.astype(str),
        autopct='%1.1f%%',
        colors=sns.color_palette("Set2")
    )
    ax_pie.set_title("Prediction Class Distribution")
    st.pyplot(fig_pie)











